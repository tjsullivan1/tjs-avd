name: Build WVD Image

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths:
      - image-creation/*
  pull_request:
    branches: [ main ]
    paths:
      - image-creation/*
  schedule:
    - cron: '0 0 * * *'  # every day at midnight

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS_AIRS}}
          enable-AzPSSession: true 

      # Runs a set of commands using the runners shell
      - name: Create a new image with Azure Image Builder
        uses: azure/powershell@v1
        with:
          inlineScript: |
            ./image-creation/new-image.ps1
          azPSVersion: "latest"
  
  cleanup:
    if: ${{ github.event_name	 == 'schedule'}} # I only want this to run if it is started by schedule
    runs-on: ubuntu-latest
    env:
      SIG: sigseaib
      RESOURCE_GROUP: rg-images
      IMAGE_DEFINITION: se-wvd
    steps:
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS_AIRS}}
          enable-AzPSSession: true 
      - name: Install Az Image Builder Module
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Install-Module Az.ImageBuilder -Force
          azPSVersion: "latest"
      - name: Delete old image versions and templates
        uses: azure/powershell@v1
        with:
          inlineScript: |
            $SIG = $env:SIG 
            $rg = $env:RESOURCE_GROUP.toLower()
            $image_def = $env:IMAGE_DEFINITION

            $last_week = (get-date).AddDays(-7)
            Get-AzGalleryImageVersion -ResourceGroupName $rg -GalleryName $SIG -GalleryImageDefinitionName $image_def | select Name -ExpandProperty PublishingProfile | where PublishedDate -lt $last_week | % { 
              Get-AzGalleryImageVersion -ResourceGroupName $rg -GalleryName $SIG -GalleryImageDefinitionName $image_def -Name $_.Name | Remove-AzGalleryImageVersion -Force 
            }

            Get-AzImageBuilderTemplate | where LastRunStatusEndTime -lt $last_week | Remove-AzImageBuilderTemplate
          azPSVersion: "latest"
  